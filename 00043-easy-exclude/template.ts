type MyExclude<T, U> = T extends U ?never : T


/* 
  知识点：
    extends的第二种使用方法分布式条件类型概念
    官网原话-如果我们将联合类型插入 泛型 ，那么条件类型将应用于该联合的每个成员
    这里得出解法，每个联合类型都会判断一次，最后返回联合类型
    T是父，U是子
    任意类型都是自身的子类型和超类型，称为自反性 S <: S 且 S :> S
    最终结果为： never | 'b' | 'c'   简化    'b' | 'c'
*/

